param (
    [Parameter(Mandatory = $true)]
    [object] $WebhookData
)

# Parse the WebhookData from JSON into a PowerShell object
$parsedWebhookData = ConvertFrom-Json -InputObject $WebhookData.RequestBody

# Extract the URL from the parsed object
$url = $parsedWebhookData.data.alertContext.condition.linkToSearchResultsAPI

# Get an Azure AD token
$token = (Get-AzAccessToken -ResourceUrl "https://api.loganalytics.io").Token

# Define the headers to pass to the Invoke-WebRequest cmdlet
$headersAzureMonitor = @{
    'Authorization' = "Bearer $token"
    'Content-Type'  = 'application/json'
}

# Use Invoke-WebRequest to make the HTTP GET request
try {
    $response = Invoke-WebRequest -Uri $url -Headers $headersAzureMonitor -Method Get
    Write-Verbose "Response from Azure Monitor: $($response.Content)"
}
catch {
    Write-Verbose "Error fetching data from Azure Monitor: $($_.Exception.Message)"
}

# Extracting data from the WebhookData parameter
$aadUserPrincipalName = $parsedWebhookData.data.alertContext.condition.userPrincipalName

# Generate a random password
$newPassword = ([char[]]([char]33..[char]95) + ([char[]]([char]97..[char]126)) + 0..9 | sort {Get-Random})[0..8] -join ''

# Output the generated password
Write-Output "Generated password: $newPassword"

# Connect to Azure Account using Service Principal
$tenantId = <"MASKED TENANT ID">
$appId = <"MASKED APP ID">
$appSecret = <"MASKED APPSECRET ID">

$securePassword = ConvertTo-SecureString -String $appSecret -AsPlainText -Force
$credential = New-Object -TypeName PSCredential -ArgumentList $appId, $securePassword

# Login into Azure
Connect-AzAccount -ServicePrincipal -TenantId $tenantId -Credential $credential

# Get an OAuth token for Microsoft Graph
$tokenResponse = Invoke-RestMethod -Uri "https://login.microsoftonline.com/$tenantId/oauth2/v2.0/token" -Method Post -Body @{
    grant_type    = "client_credentials"
    client_id     = $appId
    client_secret = $appSecret
    scope         = "https://graph.microsoft.com/.default"
}

# Set Authorization header for Graph API
$headers = @{
    "Authorization" = "Bearer $($tokenResponse.access_token)"
    "Content-Type"  = "application/json"
}

# Get the user's Object Id from UserPrincipalName
$user = Invoke-RestMethod -Uri "https://graph.microsoft.com/v1.0/users/$aadUserPrincipalName" -Headers $headers
$userObjectId = $user.id

# Set the user's new password using Microsoft Graph API
$uri = "https://graph.microsoft.com/v1.0/users/$userObjectId"
$body = @{
    passwordProfile = @{
        forceChangePasswordNextSignIn = $true
        password = $newPassword
    }
} | ConvertTo-Json
$alertName = "Azure-Monitor-for-morethan-3-failure"
$mailMessage = @"
Dear $aadUserPrincipalName,

We have detected unusual activity related to your account. As a precautionary measure to protect your information, we have reset your account password.

Your temporary password is: $newPassword

Please sign in and change this temporary password as soon as possible. Rest assured that our security team has been notified and is currently investigating the matter. We take your security seriously, and we are doing everything in our power to protect your account.Should you notice any further suspicious activity, or if you have any concerns, please do not hesitate to contact our support team immediately.

We apologize for any inconvenience this may cause and appreciate your understanding and cooperation in this crucial security matter.

Best Regards,
Your Security Team.
"@
$2mailMessage = @"
Dear Administrator,

This email is to notify you that a potential password compromise has been detected. The user with PrincipalName $aadUserPrincipalName has also been notified about this issue.

Alert Name: $alertName

Best regards,
Your Company
"@

try {
    # Call Microsoft Graph API to update the password
    Invoke-RestMethod -Uri $uri -Method PATCH -Headers $headers -Body $body -ContentType "application/json"

    # If the above line executes successfully, then this message will be printed
    Write-Output "The password has been reset for the following account: $aadUserPrincipalName"

    # Now, sending email with the SendGrid API
    $sendGridApiKey = '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'
    $fromAddress = "srihari.krishnan@mycit.ie"
    $toAddress = $user.mail
    $mailSubject = "Important: Your Account Password Has Been Reset"
    
    # # Set second email details
    # $secondToAddress = "sriharik0908@gmail.com"
    # $secondMailSubject = "Potential Password Compromise Alert - $alertName"
    $mailbody = @{
       personalizations = @(
         @{
           to      = @(
             @{
               email = $toAddress
             }
           )
           subject = $mailSubject
         }
       )
       from             = @{
         email = $fromAddress
       }
       content          = @(
         @{
           type  = "text/plain"
           value = $mailMessage
         }
       )
    } | ConvertTo-Json -Depth 10

    $headers = @{
        'Authorization' = "Bearer $sendGridApiKey"
        'Content-Type' = 'application/json'
    }

    $mailApiUri = 'https://api.sendgrid.com/v3/mail/send'
    Invoke-RestMethod -Method Post -Uri $mailApiUri -Body $mailbody -Headers $headers

    Write-Output "Email has been sent to the user with new password"
}
catch {
    # If there is an error in the Invoke-RestMethod, this block will be executed
    Write-Output "Failed to reset password for the account: $aadUserPrincipalName"
    Write-Output $_ #This will print the actual error message
}

$sendGridApiKey = <"MASKED API KEY">
$fromAddress = "srihari.krishnan@mycit.ie"
$2toAddress = "admnscurity@gmail.com"
$2mailSubject = "Potential Password Compromise Alert for $aadUserPrincipalName"

# # Set second email details
# $secondToAddress = "sriharik0908@gmail.com"
# $secondMailSubject = "Potential Password Compromise Alert - $alertName"
$mailbody = @{
   personalizations = @(
     @{
       to      = @(
         @{
           email = $2toAddress
         }
       )
       subject = $2mailSubject
     }
   )
   from             = @{
     email = $fromAddress
   }
   content          = @(
     @{
       type  = "text/plain"
       value = $2mailMessage
     }
   )
} | ConvertTo-Json -Depth 10
$headers = @{
    'Authorization' = "Bearer $sendGridApiKey"
    'Content-Type' = 'application/json'
}

    $mailApiUri = 'https://api.sendgrid.com/v3/mail/send'
    Invoke-RestMethod -Method Post -Uri $mailApiUri -Body $mailbody -Headers $headers
